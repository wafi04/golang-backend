// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: grpc/pb/stock.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StockService_ChangeStock_FullMethodName            = "/pb.StockService/ChangeStock"
	StockService_GetStock_FullMethodName               = "/pb.StockService/GetStock"
	StockService_BatchGetStock_FullMethodName          = "/pb.StockService/BatchGetStock"
	StockService_CheckStockAvailability_FullMethodName = "/pb.StockService/CheckStockAvailability"
)

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockServiceClient interface {
	// Mengubah jumlah stok
	ChangeStock(ctx context.Context, in *ChangeStockRequest, opts ...grpc.CallOption) (*Stock, error)
	// Mendapatkan info stok single item
	GetStock(ctx context.Context, in *GetStockRequest, opts ...grpc.CallOption) (*Stock, error)
	// Mendapatkan info stok multiple items
	BatchGetStock(ctx context.Context, in *BatchGetStockRequest, opts ...grpc.CallOption) (*BatchGetStockResponse, error)
	// Mengecek ketersediaan stok
	CheckStockAvailability(ctx context.Context, in *CheckStockAvailabilityRequest, opts ...grpc.CallOption) (*CheckStockAvailabilityResponse, error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) ChangeStock(ctx context.Context, in *ChangeStockRequest, opts ...grpc.CallOption) (*Stock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stock)
	err := c.cc.Invoke(ctx, StockService_ChangeStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) GetStock(ctx context.Context, in *GetStockRequest, opts ...grpc.CallOption) (*Stock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stock)
	err := c.cc.Invoke(ctx, StockService_GetStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) BatchGetStock(ctx context.Context, in *BatchGetStockRequest, opts ...grpc.CallOption) (*BatchGetStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetStockResponse)
	err := c.cc.Invoke(ctx, StockService_BatchGetStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) CheckStockAvailability(ctx context.Context, in *CheckStockAvailabilityRequest, opts ...grpc.CallOption) (*CheckStockAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckStockAvailabilityResponse)
	err := c.cc.Invoke(ctx, StockService_CheckStockAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServiceServer is the server API for StockService service.
// All implementations must embed UnimplementedStockServiceServer
// for forward compatibility.
type StockServiceServer interface {
	// Mengubah jumlah stok
	ChangeStock(context.Context, *ChangeStockRequest) (*Stock, error)
	// Mendapatkan info stok single item
	GetStock(context.Context, *GetStockRequest) (*Stock, error)
	// Mendapatkan info stok multiple items
	BatchGetStock(context.Context, *BatchGetStockRequest) (*BatchGetStockResponse, error)
	// Mengecek ketersediaan stok
	CheckStockAvailability(context.Context, *CheckStockAvailabilityRequest) (*CheckStockAvailabilityResponse, error)
	mustEmbedUnimplementedStockServiceServer()
}

// UnimplementedStockServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStockServiceServer struct{}

func (UnimplementedStockServiceServer) ChangeStock(context.Context, *ChangeStockRequest) (*Stock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStock not implemented")
}
func (UnimplementedStockServiceServer) GetStock(context.Context, *GetStockRequest) (*Stock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStock not implemented")
}
func (UnimplementedStockServiceServer) BatchGetStock(context.Context, *BatchGetStockRequest) (*BatchGetStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetStock not implemented")
}
func (UnimplementedStockServiceServer) CheckStockAvailability(context.Context, *CheckStockAvailabilityRequest) (*CheckStockAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStockAvailability not implemented")
}
func (UnimplementedStockServiceServer) mustEmbedUnimplementedStockServiceServer() {}
func (UnimplementedStockServiceServer) testEmbeddedByValue()                      {}

// UnsafeStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServiceServer will
// result in compilation errors.
type UnsafeStockServiceServer interface {
	mustEmbedUnimplementedStockServiceServer()
}

func RegisterStockServiceServer(s grpc.ServiceRegistrar, srv StockServiceServer) {
	// If the following call pancis, it indicates UnimplementedStockServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StockService_ServiceDesc, srv)
}

func _StockService_ChangeStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).ChangeStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_ChangeStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).ChangeStock(ctx, req.(*ChangeStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_GetStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_GetStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetStock(ctx, req.(*GetStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_BatchGetStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).BatchGetStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_BatchGetStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).BatchGetStock(ctx, req.(*BatchGetStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_CheckStockAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckStockAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).CheckStockAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_CheckStockAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).CheckStockAvailability(ctx, req.(*CheckStockAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StockService_ServiceDesc is the grpc.ServiceDesc for StockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeStock",
			Handler:    _StockService_ChangeStock_Handler,
		},
		{
			MethodName: "GetStock",
			Handler:    _StockService_GetStock_Handler,
		},
		{
			MethodName: "BatchGetStock",
			Handler:    _StockService_BatchGetStock_Handler,
		},
		{
			MethodName: "CheckStockAvailability",
			Handler:    _StockService_CheckStockAvailability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/pb/stock.proto",
}
